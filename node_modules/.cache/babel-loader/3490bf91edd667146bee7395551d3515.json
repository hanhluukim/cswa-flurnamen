{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:8080/api/auth/\";\n\nconst register = (username, email, password) => {\n  var data = {\n    auth: 'Hanh',\n    message: 'Hanh'\n  };\n  console.log(JSON.stringify(data));\n  var myBlob = new Blob([JSON.stringify(data)], {\n    type: 'application/json'\n  });\n  var init = {\n    \"status\": 200,\n    \"statusText\": \"SuperSmashingGreat!\"\n  };\n  var myResponse = new Response(myBlob, init);\n  var test_response = {\n    // `data` is the response that was provided by the server\n    data: {\n      auth: 'Hanh',\n      message: 'Hanh'\n    },\n    // `status` is the HTTP status code from the server response\n    status: 200,\n    // `statusText` is the HTTP status message from the server response\n    statusText: 'OK',\n    // `headers` the headers that the server responded with\n    // All header names are lower cased\n    headers: {},\n    // `config` is the config that was provided to `axios` for the request\n    config: {},\n    // `request` is the request that generated this response\n    // It is the last ClientRequest instance in node.js (in redirects)\n    // and an XMLHttpRequest instance the browser\n    request: {}\n  };\n  console.log(\"auth.service:\");\n  console.log(myResponse.body); //return myResponse;\n\n  return axios.post(API_URL + \"signup\", {\n    username,\n    email,\n    password\n  });\n};\n\nconst login = (username, password) => {\n  return axios.post(API_URL + \"signin\", {\n    username,\n    password\n  }).then(response => {\n    if (response.data.accessToken) {\n      localStorage.setItem(\"user\", JSON.stringify(response.data));\n    }\n\n    return response.data;\n  });\n};\n\nconst logout = () => {\n  localStorage.removeItem(\"user\");\n};\n\nexport default {\n  register,\n  login,\n  logout\n};","map":{"version":3,"sources":["/home/miss-luu/Downloads/0_Studium/0_web_client/react-redux-hooks-jwt-auth/src/services/auth.service.js"],"names":["axios","API_URL","register","username","email","password","data","auth","message","console","log","JSON","stringify","myBlob","Blob","type","init","myResponse","Response","test_response","status","statusText","headers","config","request","body","post","login","then","response","accessToken","localStorage","setItem","logout","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,iCAAhB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBC,QAAlB,KAA+B;AAE9C,MAAIC,IAAI,GAAC;AAACC,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,OAAO,EAAE;AAAxB,GAAT;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAZ;AACA,MAAIO,MAAM,GAAG,IAAIC,IAAJ,CAAS,CAACH,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAD,CAAT,EAAiC;AAACS,IAAAA,IAAI,EAAG;AAAR,GAAjC,CAAb;AACA,MAAIC,IAAI,GAAG;AAAE,cAAW,GAAb;AAAmB,kBAAe;AAAlC,GAAX;AACA,MAAIC,UAAU,GAAG,IAAIC,QAAJ,CAAaL,MAAb,EAAoBG,IAApB,CAAjB;AAEA,MAAIG,aAAa,GAAC;AAChB;AACAb,IAAAA,IAAI,EACF;AAACC,MAAAA,IAAI,EAAE,MAAP;AAAeC,MAAAA,OAAO,EAAE;AAAxB,KAHc;AAMhB;AACAY,IAAAA,MAAM,EAAE,GAPQ;AAShB;AACAC,IAAAA,UAAU,EAAE,IAVI;AAYhB;AACA;AACAC,IAAAA,OAAO,EAAE,EAdO;AAgBhB;AACAC,IAAAA,MAAM,EAAE,EAjBQ;AAmBhB;AACA;AACA;AACAC,IAAAA,OAAO,EAAE;AAtBO,GAAlB;AAyBAf,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYO,UAAU,CAACQ,IAAvB,EAlC8C,CAmC9C;;AAEA,SAAOzB,KAAK,CAAC0B,IAAN,CAAWzB,OAAO,GAAG,QAArB,EAA+B;AACpCE,IAAAA,QADoC;AAEpCC,IAAAA,KAFoC;AAGpCC,IAAAA;AAHoC,GAA/B,CAAP;AAMD,CA3CD;;AA6CA,MAAMsB,KAAK,GAAG,CAACxB,QAAD,EAAWE,QAAX,KAAwB;AACpC,SAAOL,KAAK,CACT0B,IADI,CACCzB,OAAO,GAAG,QADX,EACqB;AACxBE,IAAAA,QADwB;AAExBE,IAAAA;AAFwB,GADrB,EAKJuB,IALI,CAKEC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACvB,IAAT,CAAcwB,WAAlB,EAA+B;AAC7BC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BrB,IAAI,CAACC,SAAL,CAAeiB,QAAQ,CAACvB,IAAxB,CAA7B;AACD;;AAED,WAAOuB,QAAQ,CAACvB,IAAhB;AACD,GAXI,CAAP;AAYD,CAbD;;AAeA,MAAM2B,MAAM,GAAG,MAAM;AACnBF,EAAAA,YAAY,CAACG,UAAb,CAAwB,MAAxB;AACD,CAFD;;AAIA,eAAe;AACbhC,EAAAA,QADa;AAEbyB,EAAAA,KAFa;AAGbM,EAAAA;AAHa,CAAf","sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"http://localhost:8080/api/auth/\";\n\nconst register = (username, email, password) => {\n\n  var data={auth: 'Hanh', message: 'Hanh'};\n  console.log(JSON.stringify(data));\n  var myBlob = new Blob([JSON.stringify(data)], {type : 'application/json'});\n  var init = { \"status\" : 200 , \"statusText\" : \"SuperSmashingGreat!\" };\n  var myResponse = new Response(myBlob,init);\n  \n  var test_response={\n    // `data` is the response that was provided by the server\n    data: \n      {auth: 'Hanh', message: 'Hanh'}\n    ,\n   \n    // `status` is the HTTP status code from the server response\n    status: 200,\n   \n    // `statusText` is the HTTP status message from the server response\n    statusText: 'OK',\n   \n    // `headers` the headers that the server responded with\n    // All header names are lower cased\n    headers: {},\n   \n    // `config` is the config that was provided to `axios` for the request\n    config: {},\n   \n    // `request` is the request that generated this response\n    // It is the last ClientRequest instance in node.js (in redirects)\n    // and an XMLHttpRequest instance the browser\n    request: {}\n  };\n  \n  console.log(\"auth.service:\");\n  console.log(myResponse.body);\n  //return myResponse;\n  \n  return axios.post(API_URL + \"signup\", {\n    username,\n    email,\n    password,\n  });\n  \n};\n\nconst login = (username, password) => {\n  return axios\n    .post(API_URL + \"signin\", {\n      username,\n      password,\n    })\n    .then((response) => {\n      if (response.data.accessToken) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n\n      return response.data;\n    });\n};\n\nconst logout = () => {\n  localStorage.removeItem(\"user\");\n};\n\nexport default {\n  register,\n  login,\n  logout,\n};"]},"metadata":{},"sourceType":"module"}