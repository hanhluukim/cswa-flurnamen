{"ast":null,"code":"import axios from \"axios\";\nconst m_account = {\n  username: \"Hanh\",\n  password: \"hanhhanh\"\n};\n\nconst register = (username, email, password) => {\n  if (username != \"Hanh\") {\n    var test_response = {\n      // `data` is the response that was provided by the server\n      data: {\n        auth: {\n          id: 2,\n          username: username,\n          email: email\n        },\n        message: 'erfolgreich registeriert'\n      },\n      // `status` is the HTTP status code from the server response\n      status: 200,\n      // `statusText` is the HTTP status message from the server response\n      statusText: 'OK',\n      // `headers` the headers that the server responded with\n      // All header names are lower cased\n      headers: {\n        'Content-Type': 'text/json'\n      },\n      // `config` is the config that was provided to `axios` for the request\n      config: {},\n      // `request` is the request that generated this response\n      // It is the last ClientRequest instance in node.js (in redirects)\n      // and an XMLHttpRequest instance the browser\n      request: {}\n    };\n    console.log(\"auth.service:\");\n    console.log(test_response);\n    return test_response;\n  } else {\n    var error = {\n      // `data` is the response that was provided by the server\n      data: {\n        auth: {\n          id: 2,\n          username: username,\n          email: email\n        },\n        message: 'Nutzer existiert bereits'\n      },\n      // `status` is the HTTP status code from the server response\n      status: 406,\n      // `statusText` is the HTTP status message from the server response\n      statusText: 'Not accepted',\n      // `headers` the headers that the server responded with\n      // All header names are lower cased\n      headers: {\n        'Content-Type': 'text/json'\n      },\n      // `config` is the config that was provided to `axios` for the request\n      config: {},\n      // `request` is the request that generated this response\n      // It is the last ClientRequest instance in node.js (in redirects)\n      // and an XMLHttpRequest instance the browser\n      request: {}\n    };\n    return error;\n  }\n  /*\n  return axios.post(API_URL + \"signup\", {\n    username,\n    email,\n    password,\n  });\n  */\n\n};\n\nconst login = (username, password) => {\n  if (username == m_account.username && password == m_account.password) {\n    localStorage.setItem(\"user\", JSON.stringify({\n      id: Math.random(),\n      username: username,\n      password: password,\n      roles: ['ROLE_USER']\n    }));\n    data = {};\n    return;\n  } else {\n    return;\n  }\n  /*\n  return axios\n    .post(API_URL + \"signin\", {\n      username,\n      password,\n    })\n    .then((response) => {\n      if (response.data.accessToken) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n       return response.data;\n    });\n    */\n\n};\n\nconst logout = () => {\n  localStorage.removeItem(\"user\");\n};\n\nexport default {\n  register,\n  login,\n  logout\n};","map":{"version":3,"sources":["/home/miss-luu/Downloads/0_Studium/0_web_client/react-redux-hooks-jwt-auth/src/services/auth.service.js"],"names":["axios","m_account","username","password","register","email","test_response","data","auth","id","message","status","statusText","headers","config","request","console","log","error","login","localStorage","setItem","JSON","stringify","Math","random","roles","logout","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,SAAS,GAAG;AAACC,EAAAA,QAAQ,EAAC,MAAV;AAAkBC,EAAAA,QAAQ,EAAC;AAA3B,CAAlB;;AAGA,MAAMC,QAAQ,GAAG,CAACF,QAAD,EAAWG,KAAX,EAAkBF,QAAlB,KAA+B;AAC9C,MAAID,QAAQ,IAAE,MAAd,EAAqB;AAEjB,QAAII,aAAa,GAAC;AAChB;AACAC,MAAAA,IAAI,EACF;AAACC,QAAAA,IAAI,EAAE;AAACC,UAAAA,EAAE,EAAC,CAAJ;AAAOP,UAAAA,QAAQ,EAACA,QAAhB;AAA0BG,UAAAA,KAAK,EAACA;AAAhC,SAAP;AAA+CK,QAAAA,OAAO,EAAE;AAAxD,OAHc;AAMhB;AACAC,MAAAA,MAAM,EAAE,GAPQ;AAShB;AACAC,MAAAA,UAAU,EAAE,IAVI;AAYhB;AACA;AACAC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB,OAdO;AAgBhB;AACAC,MAAAA,MAAM,EAAE,EAjBQ;AAmBhB;AACA;AACA;AACAC,MAAAA,OAAO,EAAE;AAtBO,KAAlB;AAyBAC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYX,aAAZ;AAEA,WAAOA,aAAP;AACD,GA/BH,MAgCM;AAEF,QAAIY,KAAK,GAAC;AACR;AACAX,MAAAA,IAAI,EACF;AAACC,QAAAA,IAAI,EAAE;AAACC,UAAAA,EAAE,EAAC,CAAJ;AAAOP,UAAAA,QAAQ,EAACA,QAAhB;AAA0BG,UAAAA,KAAK,EAACA;AAAhC,SAAP;AAA+CK,QAAAA,OAAO,EAAE;AAAxD,OAHM;AAMR;AACAC,MAAAA,MAAM,EAAE,GAPA;AASR;AACAC,MAAAA,UAAU,EAAE,cAVJ;AAYR;AACA;AACAC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB,OAdD;AAgBR;AACAC,MAAAA,MAAM,EAAE,EAjBA;AAmBR;AACA;AACA;AACAC,MAAAA,OAAO,EAAE;AAtBD,KAAV;AAyBA,WAAOG,KAAP;AAED;AACC;AACN;AACA;AACA;AACA;AACA;AACA;;AAEC,CAvED;;AAyEA,MAAMC,KAAK,GAAG,CAACjB,QAAD,EAAWC,QAAX,KAAwB;AAEpC,MAAID,QAAQ,IAAED,SAAS,CAACC,QAApB,IAAgCC,QAAQ,IAAGF,SAAS,CAACE,QAAzD,EAAkE;AAChEiB,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAe;AAACd,MAAAA,EAAE,EAACe,IAAI,CAACC,MAAL,EAAJ;AAAmBvB,MAAAA,QAAQ,EAACA,QAA5B;AAAsCC,MAAAA,QAAQ,EAACA,QAA/C;AAAwDuB,MAAAA,KAAK,EAAC,CAAC,WAAD;AAA9D,KAAf,CAA7B;AACAnB,IAAAA,IAAI,GAAG,EAAP;AACA;AACD,GAJD,MAKI;AACF;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC,CAxBD;;AA0BA,MAAMoB,MAAM,GAAG,MAAM;AACnBP,EAAAA,YAAY,CAACQ,UAAb,CAAwB,MAAxB;AACD,CAFD;;AAIA,eAAe;AACbxB,EAAAA,QADa;AAEbe,EAAAA,KAFa;AAGbQ,EAAAA;AAHa,CAAf","sourcesContent":["import axios from \"axios\";\n\nconst m_account = {username:\"Hanh\", password:\"hanhhanh\"}\n\n\nconst register = (username, email, password) => {\n  if (username!=\"Hanh\"){\n\n      var test_response={\n        // `data` is the response that was provided by the server\n        data: \n          {auth: {id:2, username:username, email:email}, message: 'erfolgreich registeriert'}\n        ,\n      \n        // `status` is the HTTP status code from the server response\n        status: 200,\n      \n        // `statusText` is the HTTP status message from the server response\n        statusText: 'OK',\n      \n        // `headers` the headers that the server responded with\n        // All header names are lower cased\n        headers: {'Content-Type': 'text/json'},\n      \n        // `config` is the config that was provided to `axios` for the request\n        config: {},\n      \n        // `request` is the request that generated this response\n        // It is the last ClientRequest instance in node.js (in redirects)\n        // and an XMLHttpRequest instance the browser\n        request: {}\n      };\n      \n      console.log(\"auth.service:\");\n      console.log(test_response);\n\n      return test_response;\n    }\n    else{\n\n      var error={\n        // `data` is the response that was provided by the server\n        data: \n          {auth: {id:2, username:username, email:email}, message: 'Nutzer existiert bereits'}\n        ,\n      \n        // `status` is the HTTP status code from the server response\n        status: 406,\n      \n        // `statusText` is the HTTP status message from the server response\n        statusText: 'Not accepted',\n      \n        // `headers` the headers that the server responded with\n        // All header names are lower cased\n        headers: {'Content-Type': 'text/json'},\n      \n        // `config` is the config that was provided to `axios` for the request\n        config: {},\n      \n        // `request` is the request that generated this response\n        // It is the last ClientRequest instance in node.js (in redirects)\n        // and an XMLHttpRequest instance the browser\n        request: {}\n      };\n      \n      return error;\n\n    }\n      /*\n      return axios.post(API_URL + \"signup\", {\n        username,\n        email,\n        password,\n      });\n      */\n      \n};\n\nconst login = (username, password) => {\n\n  if (username==m_account.username && password== m_account.password){\n    localStorage.setItem(\"user\", JSON.stringify({id:Math.random(), username:username, password:password,roles:['ROLE_USER']}));\n    data = {}\n    return \n  }\n  else{\n    return\n  }\n  /*\n  return axios\n    .post(API_URL + \"signin\", {\n      username,\n      password,\n    })\n    .then((response) => {\n      if (response.data.accessToken) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n\n      return response.data;\n    });\n    */\n};\n\nconst logout = () => {\n  localStorage.removeItem(\"user\");\n};\n\nexport default {\n  register,\n  login,\n  logout,\n};"]},"metadata":{},"sourceType":"module"}