{"ast":null,"code":"//import axios from \"axios\";\nvar m_account={id:1,username:\"Hanh\",password:\"hanhhanh\",email:\"hanh@gmail.com\",roles:['ROLE_USER']};var register=function register(username,email,password){if(username!==\"Hanh\"){var test_response={// `data` is the response that was provided by the server\ndata:{auth:{id:2,username:username,email:email},message:'erfolgreich registeriert'},// `status` is the HTTP status code from the server response\nstatus:200,// `statusText` is the HTTP status message from the server response\nstatusText:'OK',// `headers` the headers that the server responded with\n// All header names are lower cased\nheaders:{'Content-Type':'text/json'},// `config` is the config that was provided to `axios` for the request\nconfig:{},// `request` is the request that generated this response\n// It is the last ClientRequest instance in node.js (in redirects)\n// and an XMLHttpRequest instance the browser\nrequest:{}};console.log(\"auth.service:\");console.log(test_response);return test_response;}else{var error={// `data` is the response that was provided by the server\ndata:{auth:{id:2,username:username,email:email},message:'Nutzer existiert bereits'},// `status` is the HTTP status code from the server response\nstatus:406,// `statusText` is the HTTP status message from the server response\nstatusText:'Not accepted',// `headers` the headers that the server responded with\n// All header names are lower cased\nheaders:{'Content-Type':'text/json'},// `config` is the config that was provided to `axios` for the request\nconfig:{},// `request` is the request that generated this response\n// It is the last ClientRequest instance in node.js (in redirects)\n// and an XMLHttpRequest instance the browser\nrequest:{}};return error;}/*\n      return axios.post(API_URL + \"signup\", {\n        username,\n        email,\n        password,\n      });\n      */};var login=function login(username,password){if(username==m_account.username&&password==m_account.password){var resp={data:{auth:{user:{id:m_account.id,username:m_account.username,email:m_account.email,roles:m_account.roles}},message:\"success\"}};localStorage.setItem(\"user\",JSON.stringify(resp.data.auth.user));return resp;}else{var error={data:{auth:{user:{}},message:\"Nutzername oder Password nicht korrekt\"}};return error;}/*\n  return axios\n    .post(API_URL + \"signin\", {\n      username,\n      password,\n    })\n    .then((response) => {\n      if (response.data.accessToken) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n\n      return response.data;\n    });\n    */};var logout=function logout(){localStorage.removeItem(\"user\");};export default{register:register,login:login,logout:logout};","map":{"version":3,"sources":["/home/miss-luu/Downloads/0_Studium/0_web_client/cswa/cswa-flurnamen/src/services/auth.service.js"],"names":["m_account","id","username","password","email","roles","register","test_response","data","auth","message","status","statusText","headers","config","request","console","log","error","login","resp","user","localStorage","setItem","JSON","stringify","logout","removeItem"],"mappings":"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","sourcesContent":["//import axios from \"axios\";\n\nconst m_account = {id:1, username:\"Hanh\", password:\"hanhhanh\", email:\"hanh@gmail.com\",roles:['ROLE_USER']}\n\n\nconst register = (username, email, password) => {\n  if (username!==\"Hanh\"){\n\n      var test_response={\n        // `data` is the response that was provided by the server\n        data: \n          {auth: \n            {id:2, username:username, email:email}, \n            message: 'erfolgreich registeriert'\n          }\n        ,\n      \n        // `status` is the HTTP status code from the server response\n        status: 200,\n      \n        // `statusText` is the HTTP status message from the server response\n        statusText: 'OK',\n      \n        // `headers` the headers that the server responded with\n        // All header names are lower cased\n        headers: {'Content-Type': 'text/json'},\n      \n        // `config` is the config that was provided to `axios` for the request\n        config: {},\n      \n        // `request` is the request that generated this response\n        // It is the last ClientRequest instance in node.js (in redirects)\n        // and an XMLHttpRequest instance the browser\n        request: {}\n      };\n      \n      console.log(\"auth.service:\");\n      console.log(test_response);\n      \n      return test_response;\n    }\n    else{\n\n      var error={\n        // `data` is the response that was provided by the server\n        data: \n          {auth: {id:2, username:username, email:email}, message: 'Nutzer existiert bereits'}\n        ,\n      \n        // `status` is the HTTP status code from the server response\n        status: 406,\n      \n        // `statusText` is the HTTP status message from the server response\n        statusText: 'Not accepted',\n      \n        // `headers` the headers that the server responded with\n        // All header names are lower cased\n        headers: {'Content-Type': 'text/json'},\n      \n        // `config` is the config that was provided to `axios` for the request\n        config: {},\n      \n        // `request` is the request that generated this response\n        // It is the last ClientRequest instance in node.js (in redirects)\n        // and an XMLHttpRequest instance the browser\n        request: {}\n      };\n      \n      return error;\n\n    }\n      /*\n      return axios.post(API_URL + \"signup\", {\n        username,\n        email,\n        password,\n      });\n      */\n      \n};\n\nconst login = (username, password) => {\n\n  if (username==m_account.username && password== m_account.password){\n    var resp={\n      data:{\n        auth:{\n          user:{\n            id:m_account.id, \n            username: m_account.username, \n            email: m_account.email, \n            roles:m_account.roles\n          }\n        },\n        message:\"success\"\n      }\n    }\n    localStorage.setItem(\"user\", JSON.stringify(resp.data.auth.user));\n    return resp\n  }\n  else{\n    var error={\n      data:{\n        auth:{\n          user:{}\n        }, \n          message:\"Nutzername oder Password nicht korrekt\"}\n      }\n    return error\n  }\n  /*\n  return axios\n    .post(API_URL + \"signin\", {\n      username,\n      password,\n    })\n    .then((response) => {\n      if (response.data.accessToken) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n\n      return response.data;\n    });\n    */\n};\n\nconst logout = () => {\n  localStorage.removeItem(\"user\");\n};\n\nexport default {\n  register,\n  login,\n  logout,\n};"]},"metadata":{},"sourceType":"module"}