{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const register = (username, email, password) => dispatch => {\n  var response = AuthService.register(username, email, password);\n  console.log(response);\n  dispatch({\n    type: REGISTER_SUCCESS\n  });\n  dispatch({\n    type: SET_MESSAGE,\n    payload: response.data.message\n  });\n  return Promise.resolve();\n  /*\n  AuthService.register(username, email, password).then(\n    (response) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n      });\n       dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n       return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n       dispatch({\n        type: REGISTER_FAIL,\n      });\n       dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n       return Promise.reject();\n    }\n  );\n  */\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/miss-luu/Downloads/0_Studium/0_web_client/react-redux-hooks-jwt-auth/src/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","username","email","password","dispatch","response","console","log","type","payload","data","message","Promise","resolve","login","then","user","error","toString","reject","logout"],"mappings":"AAAA,SACEA,gBADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,UAJF,EAKEC,MALF,EAMEC,WANF,QAOO,SAPP;AASA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBC,QAAlB,KAAgCC,QAAD,IAAc;AACnE,MAAIC,QAAQ,GAAGN,WAAW,CAACC,QAAZ,CAAqBC,QAArB,EAA+BC,KAA/B,EAAsCC,QAAtC,CAAf;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAD,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAEf;AADC,GAAD,CAAR;AAIAW,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAEV,WADC;AAEPW,IAAAA,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcC;AAFhB,GAAD,CAAR;AAIA,SAAOC,OAAO,CAACC,OAAR,EAAP;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMC,CA/CM;AAiDP,OAAO,MAAMC,KAAK,GAAG,CAACb,QAAD,EAAWE,QAAX,KAAyBC,QAAD,IAAc;AACzD,SAAOL,WAAW,CAACe,KAAZ,CAAkBb,QAAlB,EAA4BE,QAA5B,EAAsCY,IAAtC,CACJL,IAAD,IAAU;AACRN,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEb,aADC;AAEPc,MAAAA,OAAO,EAAE;AAAEO,QAAAA,IAAI,EAAEN;AAAR;AAFF,KAAD,CAAR;AAKA,WAAOE,OAAO,CAACC,OAAR,EAAP;AACD,GARI,EASJI,KAAD,IAAW;AACT,UAAMN,OAAO,GACVM,KAAK,CAACZ,QAAN,IACCY,KAAK,CAACZ,QAAN,CAAeK,IADhB,IAECO,KAAK,CAACZ,QAAN,CAAeK,IAAf,CAAoBC,OAFtB,IAGAM,KAAK,CAACN,OAHN,IAIAM,KAAK,CAACC,QAAN,EALF;AAOAd,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEZ;AADC,KAAD,CAAR;AAIAQ,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEV,WADC;AAEPW,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACO,MAAR,EAAP;AACD,GA3BI,CAAP;AA6BD,CA9BM;AAgCP,OAAO,MAAMC,MAAM,GAAG,MAAOhB,QAAD,IAAc;AACxCL,EAAAA,WAAW,CAACqB,MAAZ;AAEAhB,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAEX;AADC,GAAD,CAAR;AAGD,CANM","sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  SET_MESSAGE,\n} from \"./types\";\n\nimport AuthService from \"../services/auth.service\";\n\nexport const register = (username, email, password) => (dispatch) => {\n  var response = AuthService.register(username, email, password);\n  console.log(response);\n  dispatch({\n    type: REGISTER_SUCCESS,\n  });\n\n  dispatch({\n    type: SET_MESSAGE,\n    payload: response.data.message,\n  });\n  return Promise.resolve()\n  /*\n  AuthService.register(username, email, password).then(\n    (response) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n  */\n};\n\nexport const login = (username, password) => (dispatch) => {\n  return AuthService.login(username, password).then(\n    (data) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { user: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n};"]},"metadata":{},"sourceType":"module"}