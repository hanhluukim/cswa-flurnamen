{"ast":null,"code":"import{REGISTER_SUCCESS,REGISTER_FAIL,LOGIN_SUCCESS,LOGIN_FAIL,LOGOUT,SET_MESSAGE}from\"./types\";import AuthService from\"../services/auth.service\";/*\n-Hier wird ein Fake Authorziation erstellt.\n-für jede Aktion wird ein Service (fake Backend) durchgeführt\n-kiene echte Response hier. Response wird selbst erstellt.\n*/export var register=function register(username,email,password){return function(dispatch){/*\ndie eingabe von Nutzer wird weiter an Service eingegeben\nBedingungen der Registrierung, Anmeldung wurden in der service definiert. Dann wird eine Response entsprechend erstellt.\n*/var response=AuthService.register(username,email,password);//AuthService wird Registierung checken mit den gegebenen Variablen\nconsole.log(response);if(response.status==200){dispatch({type:REGISTER_SUCCESS});dispatch({type:SET_MESSAGE,payload:response.data.message});return Promise.resolve();}else{dispatch({type:REGISTER_FAIL});dispatch({type:SET_MESSAGE,payload:response.data.message});return Promise.reject();}};};export var login=function login(username,password){return function(dispatch){var resp=AuthService.login(username,password);//LOGIN SERVICE wird Nutzer ins lokalStorage hinzugfügen wenn message \"success\" ist\nif(resp.data.message==\"success\"){console.log(\"Action\");console.log(resp.data.auth.user);dispatch({type:LOGIN_SUCCESS,payload:{user:resp.data.auth.user}});return Promise.resolve();}else{dispatch({type:LOGIN_FAIL});dispatch({type:SET_MESSAGE,payload:resp.data.message});return Promise.reject();};};};export var logout=function logout(){return function(dispatch){AuthService.logout();//im Autho service wird Nutzer aus dem localStorage entfernt\ndispatch({type:LOGOUT});};};","map":{"version":3,"sources":["/home/miss-luu/Downloads/0_Studium/0_web_client/cswa/cswa-flurnamen/src/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","username","email","password","dispatch","response","console","log","status","type","payload","data","message","Promise","resolve","reject","login","resp","auth","user","logout"],"mappings":"AAAA,OACEA,gBADF,CAEEC,aAFF,CAGEC,aAHF,CAIEC,UAJF,CAKEC,MALF,CAMEC,WANF,KAOO,SAPP,CASA,MAAOC,CAAAA,WAAP,KAAwB,0BAAxB,CAEA;AACA;AACA;AACA;AACA,EAEA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,QAAD,CAAWC,KAAX,CAAkBC,QAAlB,QAA+B,UAACC,QAAD,CAAc,CACrE;AACA;AACA;AACA,EACE,GAAIC,CAAAA,QAAQ,CAAGN,WAAW,CAACC,QAAZ,CAAqBC,QAArB,CAA+BC,KAA/B,CAAsCC,QAAtC,CAAf,CAAgE;AAChEG,OAAO,CAACC,GAAR,CAAYF,QAAZ,EACA,GAAIA,QAAQ,CAACG,MAAT,EAAiB,GAArB,CAAyB,CACvBJ,QAAQ,CAAC,CACPK,IAAI,CAAEhB,gBADC,CAAD,CAAR,CAIAW,QAAQ,CAAC,CACPK,IAAI,CAAEX,WADC,CAEPY,OAAO,CAAEL,QAAQ,CAACM,IAAT,CAAcC,OAFhB,CAAD,CAAR,CAIA,MAAOC,CAAAA,OAAO,CAACC,OAAR,EAAP,CACD,CAVD,IAWI,CACFV,QAAQ,CAAC,CACPK,IAAI,CAAEf,aADC,CAAD,CAAR,CAIAU,QAAQ,CAAC,CACPK,IAAI,CAAEX,WADC,CAEPY,OAAO,CAAEL,QAAQ,CAACM,IAAT,CAAcC,OAFhB,CAAD,CAAR,CAIA,MAAOC,CAAAA,OAAO,CAACE,MAAR,EAAP,CACD,CACF,CA7BuB,EAAjB,CA+BP,MAAO,IAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACf,QAAD,CAAWE,QAAX,QAAwB,UAACC,QAAD,CAAc,CAEzD,GAAIa,CAAAA,IAAI,CAAGlB,WAAW,CAACiB,KAAZ,CAAkBf,QAAlB,CAA4BE,QAA5B,CAAX,CAAkD;AAElD,GAAIc,IAAI,CAACN,IAAL,CAAUC,OAAV,EAAmB,SAAvB,CAAiC,CAC/BN,OAAO,CAACC,GAAR,CAAY,QAAZ,EACAD,OAAO,CAACC,GAAR,CAAYU,IAAI,CAACN,IAAL,CAAUO,IAAV,CAAeC,IAA3B,EACAf,QAAQ,CAAC,CACPK,IAAI,CAAEd,aADC,CAEPe,OAAO,CAAE,CAAES,IAAI,CAAEF,IAAI,CAACN,IAAL,CAAUO,IAAV,CAAeC,IAAvB,CAFF,CAAD,CAAR,CAKA,MAAON,CAAAA,OAAO,CAACC,OAAR,EAAP,CAED,CAVD,IAWI,CACFV,QAAQ,CAAC,CACPK,IAAI,CAAEb,UADC,CAAD,CAAR,CAIAQ,QAAQ,CAAC,CACPK,IAAI,CAAEX,WADC,CAEPY,OAAO,CAAEO,IAAI,CAACN,IAAL,CAAUC,OAFZ,CAAD,CAAR,CAKA,MAAOC,CAAAA,OAAO,CAACE,MAAR,EAAP,CAED,EACF,CA5BoB,EAAd,CA8BP,MAAO,IAAMK,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,SAAM,UAAChB,QAAD,CAAc,CACxCL,WAAW,CAACqB,MAAZ,GAAsB;AAEtBhB,QAAQ,CAAC,CACPK,IAAI,CAAEZ,MADC,CAAD,CAAR,CAGD,CANqB,EAAf","sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  SET_MESSAGE,\n} from \"./types\";\n\nimport AuthService from \"../services/auth.service\";\n\n/*\n-Hier wird ein Fake Authorziation erstellt.\n-für jede Aktion wird ein Service (fake Backend) durchgeführt\n-kiene echte Response hier. Response wird selbst erstellt.\n*/\n\nexport const register = (username, email, password) => (dispatch) => {\n/*\ndie eingabe von Nutzer wird weiter an Service eingegeben\nBedingungen der Registrierung, Anmeldung wurden in der service definiert. Dann wird eine Response entsprechend erstellt.\n*/\n  var response = AuthService.register(username, email, password); //AuthService wird Registierung checken mit den gegebenen Variablen\n  console.log(response);\n  if (response.status==200){\n    dispatch({\n      type: REGISTER_SUCCESS,\n    });\n\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message,\n    });\n    return Promise.resolve();\n  }\n  else{\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message,\n    });\n    return Promise.reject();\n  }\n};\n\nexport const login = (username, password) => (dispatch) => {\n\n  var resp = AuthService.login(username, password); //LOGIN SERVICE wird Nutzer ins lokalStorage hinzugfügen wenn message \"success\" ist\n\n  if (resp.data.message==\"success\"){\n    console.log(\"Action\");\n    console.log(resp.data.auth.user);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: { user: resp.data.auth.user},\n    });\n\n    return Promise.resolve();\n\n  }\n  else{\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n\n    dispatch({\n      type: SET_MESSAGE,\n      payload: resp.data.message,\n    });\n\n    return Promise.reject();\n\n  };\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout(); //im Autho service wird Nutzer aus dem localStorage entfernt\n\n  dispatch({\n    type: LOGOUT,\n  });\n};"]},"metadata":{},"sourceType":"module"}